<?php
/*
 * This class will process the RxHub LOAD Files
 */

// Include base class
include WEB_ROOT.'base/MedSimpleFile.php';

class MedRxHFile extends MedSimpleFile
{
	/**
	* Type of file
	* @var type 
	*/
	private $FileType;
	
	/**
	* Store meta info about file which will be stored in table as records
	* @var array
	*/
	private $Meta;
	
	/**
	* 
	* @param string $FileName
	* @param string $FileType
	* @return unknown_type
	*/
	public function __construct($FileName, $FileType)
	{
		$this->FileType = $FileType;
		// call parent class constructor
		parent::__construct($FileName);
	}
	
	/**
	* Function which collects and parses the meta data (header+footer) of the RxHUB file
	* @global array $fbCommonHeader
	* @global array $fbHeader
	* @return array 
	*/
	private function parseFileMeta()
	{
		// Get config vars 
		global $fbHeader, $fbFooter, $fbFieldSep, $rxFile;
		// First read header of the file
		$HeaderData = $this->readHeader(2);
		// Now read footer of the file
		$FooterData = $this->readFooter(2);
		
		$Record = array();
		
		// Process header lines
		foreach($HeaderData as $Index => $Line)
		{
			if(trim($Line) != "")
			{
				if(strpos($Line, "HDR") !== false)
				{
					$PartRecord = $this->parseLine($Line, MedRxHFile::simplifyCofig($fbHeader['COMMON']), $fbFieldSep);
				}
				else if(strpos($Line, $rxFile[$this->FileType]['HeaderID']) !== false)
				{
					$PartRecord = $this->parseLine($Line, MedRxHFile::simplifyCofig($fbHeader[$this->FileType]), $fbFieldSep);
				}
				$Record = array_merge($PartRecord, $Record);
			}
		}
		
		// Process footer lines
		foreach($FooterData as $Index => $Line)
		{
			if(trim($Line) != "")
			{
				if(strpos($Line, "TRL") !== false)
				{
					// $PartRecord = $this->parseLine($Line, MedRxHFile::simplifyCofig($fbCommonFooter), $fbFieldSep);
				}
				else if(strpos($Line, $rxFile[$this->FileType]['FooterID']) !== false)
				{
					$PartRecord = $this->parseLine($Line, MedRxHFile::simplifyCofig($fbFooter[$this->FileType]), $fbFieldSep);
				}
				$Record = array_merge($PartRecord, $Record);
			}
		}
		return $Record;
	}
	
	/**
	* Simplify config item, changes the index of array
	* @param array $Config
	* @return array 
	*/
	private static function simplifyCofig($Config)
	{
		$SimpleConfig = array();
		foreach($Config as $Item)
		{
			$SimpleConfig[$Item['POS']] = $Item;
		}
		return $SimpleConfig;
	}
	
	/**
	* Parses file-line and converts as an associative array
	* @param string $RawLine
	* @param array $Config
	* @param char $ColumnSep
	* @return array
	*/
	private function parseLine($RawLine, $Config, $ColumnSep = "|")
	{
		$Line = explode($ColumnSep, $RawLine);
		$Record = array();
		foreach($Line as $ColumnIndex => $ColumnValue)
		{
			if(isset($Config[$ColumnIndex]) === true)
			{
				$ColumnValue = trim($ColumnValue);
			
				if(isset($Config[$ColumnIndex]['CAST']) === true)
				{
					switch($Config[$ColumnIndex]['CAST'])
					{
						CASE "DATE":
							$ColumnValue = strftime("%Y-%m-%d",strtotime($ColumnValue));
							break;
				
						CASE "TIME":
						$ColumnValue = strftime("%H:%M:%S" ,strtotime(substr($ColumnValue,0,6)));
						break;
					}
				}
			
				$Record[$Config[$ColumnIndex]['FIELD']] = trim($ColumnValue);
			}
		}
		return $Record;
	}
	
	/**
	* Returns Meta for file
	* @return array
	*/
	public function getFileMeta()
	{
		return $this->parseFileMeta();
	}
	
	// Not implemented
	public function writeRecordsInFile($FilePath)
	{
	
	}
}